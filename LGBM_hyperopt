{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8633466,"sourceType":"datasetVersion","datasetId":5169686}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"##Required packages \n\n#Generic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport gc\nimport os\nimport warnings\nimport ydata_profiling as dp\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\nfrom hyperopt import hp, tpe, fmin, Trials, STATUS_OK\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import early_stopping, log_evaluation  # Import only the needed callbac\nimport logging\n\n# Set LightGBM logging level to WARNING or ERROR to suppress INFO logs\n\nwarnings.filterwarnings('ignore')\ngc.enable()\n%matplotlib inline\n\n#Setting up display options for pandas dataframe\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.061237Z","iopub.execute_input":"2024-06-22T10:09:56.061761Z","iopub.status.idle":"2024-06-22T10:09:56.077420Z","shell.execute_reply.started":"2024-06-22T10:09:56.061719Z","shell.execute_reply":"2024-06-22T10:09:56.076017Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/academic-success-dataset/train.csv', index_col='id')\ndf_test  = pd.read_csv('/kaggle/input/academic-success-dataset/test.csv', index_col='id')\ndf_sub = pd.read_csv('/kaggle/input/academic-success-dataset/sample_submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.079770Z","iopub.execute_input":"2024-06-22T10:09:56.080191Z","iopub.status.idle":"2024-06-22T10:09:56.622638Z","shell.execute_reply.started":"2024-06-22T10:09:56.080153Z","shell.execute_reply":"2024-06-22T10:09:56.621353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"##REMOVING WHITE SPACES FROM FEATURE NAMES\ndf_train.columns=[x.replace(' ','_') for x in df_train.columns]\ndf_test.columns=[x.replace(' ','_') for x in df_test.columns]","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.624282Z","iopub.execute_input":"2024-06-22T10:09:56.624713Z","iopub.status.idle":"2024-06-22T10:09:56.631261Z","shell.execute_reply.started":"2024-06-22T10:09:56.624681Z","shell.execute_reply":"2024-06-22T10:09:56.630027Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE BEFORE DOWNCASTING\nprint('\\ntrain dataset data usage information before downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information before downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)\n\n\n#DOWNCASTING TRAIN DATASET\nfor column in df_train.columns:\n    if df_train[column].dtype == \"float64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"float\")\n    if df_train[column].dtype == \"int64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"integer\")\n        \n#DOWNCASTING TEST DATASET\nfor column in df_test.columns:\n    if df_test[column].dtype == \"float64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"float\")\n    if df_test[column].dtype == \"int64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"integer\")\n        \n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE AFTER DOWNCASTING\nprint('train dataset data usage information after downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information after downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.632883Z","iopub.execute_input":"2024-06-22T10:09:56.633446Z","iopub.status.idle":"2024-06-22T10:09:56.816624Z","shell.execute_reply.started":"2024-06-22T10:09:56.633407Z","shell.execute_reply":"2024-06-22T10:09:56.815381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_encoder = LabelEncoder()\ndf_train['Target'] = label_encoder.fit_transform(df_train['Target'])","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.820096Z","iopub.execute_input":"2024-06-22T10:09:56.821011Z","iopub.status.idle":"2024-06-22T10:09:56.859054Z","shell.execute_reply.started":"2024-06-22T10:09:56.820965Z","shell.execute_reply":"2024-06-22T10:09:56.855513Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features = list(df_test.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.860569Z","iopub.execute_input":"2024-06-22T10:09:56.861039Z","iopub.status.idle":"2024-06-22T10:09:56.872953Z","shell.execute_reply.started":"2024-06-22T10:09:56.861002Z","shell.execute_reply":"2024-06-22T10:09:56.871279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(lgb.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.875109Z","iopub.execute_input":"2024-06-22T10:09:56.876072Z","iopub.status.idle":"2024-06-22T10:09:56.886809Z","shell.execute_reply.started":"2024-06-22T10:09:56.876000Z","shell.execute_reply":"2024-06-22T10:09:56.885513Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features = list(df_test.columns)\nX_train = df_train[features]\ny_train = df_train['Target']\nX_test = df_test[features]\n\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.888725Z","iopub.execute_input":"2024-06-22T10:09:56.889855Z","iopub.status.idle":"2024-06-22T10:09:56.944196Z","shell.execute_reply.started":"2024-06-22T10:09:56.889816Z","shell.execute_reply":"2024-06-22T10:09:56.943073Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def objective(params):\n    # Convert integer parameters to int (since hyperopt may return them as floats)\n    params['num_leaves'] = int(params['num_leaves'])\n    params['max_depth'] = int(params['max_depth'])\n    params['objective'] = 'multiclass'\n    params['metric'] = 'multi_logloss'\n    params['num_class'] = 3  # Number of classes\n\n    # Create the LightGBM datasets\n    train_data = lgb.Dataset(X_train, label=y_train)\n    valid_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n    \n    # Train the model with early stopping\n    model = lgb.train(params, \n                      train_data, \n                      num_boost_round=1000,  # Large number to allow early stopping\n                      valid_sets=[valid_data], \n                      valid_names=['valid'],  # Name for the validation dataset\n                      callbacks=[early_stopping(stopping_rounds=10), log_evaluation(period=100)],  # Early stopping and logging callbacks\n                      )  \n    \n    # Make predictions\n    predictions = model.predict(X_val, num_iteration=model.best_iteration)\n    predictions = [list(x).index(max(x)) for x in predictions]  # Convert probabilities to class labels\n    \n    # Calculate the accuracy\n    accuracy = accuracy_score(y_val, predictions)\n    \n    return {'loss': -accuracy, 'status': STATUS_OK}  # Negative accuracy because Hyperopt minimizes the loss\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.945718Z","iopub.execute_input":"2024-06-22T10:09:56.946413Z","iopub.status.idle":"2024-06-22T10:09:56.955803Z","shell.execute_reply.started":"2024-06-22T10:09:56.946360Z","shell.execute_reply":"2024-06-22T10:09:56.954662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the search space\nspace = {\n    'num_leaves': hp.quniform('num_leaves', 20, 150, 1),\n    'max_depth': hp.quniform('max_depth', 5, 20, 1),\n    'learning_rate': hp.uniform('learning_rate', 0.01, 0.3),\n    'min_child_weight': hp.uniform('min_child_weight', 0.001, 10),\n    'subsample': hp.uniform('subsample', 0.5, 1.0),\n    'colsample_bytree': hp.uniform('colsample_bytree', 0.5, 1.0),\n    'reg_alpha': hp.uniform('reg_alpha', 0, 1),\n    'reg_lambda': hp.uniform('reg_lambda', 0, 1)\n}\n\n# Optimize hyperparameters using Hyperopt\ntrials = Trials()\nbest = fmin(fn=objective,\n            space=space,\n            algo=tpe.suggest,\n            max_evals=30,\n            trials=trials)\n\n# Convert the best hyperparameters to a readable format\nbest_params = {\n    'num_leaves': int(best['num_leaves']),\n    'max_depth': int(best['max_depth']),\n    'learning_rate': best['learning_rate'],\n    'min_child_weight': best['min_child_weight'],\n    'subsample': best['subsample'],\n    'colsample_bytree': best['colsample_bytree'],\n    'reg_alpha': best['reg_alpha'],\n    'reg_lambda': best['reg_lambda'],\n    'objective': 'multiclass',\n    'metric': 'multi_logloss',\n    'num_class': 3  # Number of classes\n}\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:09:56.959070Z","iopub.execute_input":"2024-06-22T10:09:56.959408Z","iopub.status.idle":"2024-06-22T10:16:11.919614Z","shell.execute_reply.started":"2024-06-22T10:09:56.959381Z","shell.execute_reply":"2024-06-22T10:16:11.918518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Best Hyperparameters:\", best_params)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:16:11.920879Z","iopub.execute_input":"2024-06-22T10:16:11.921194Z","iopub.status.idle":"2024-06-22T10:16:11.926719Z","shell.execute_reply.started":"2024-06-22T10:16:11.921164Z","shell.execute_reply":"2024-06-22T10:16:11.925531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data = lgb.Dataset(X_train, label=y_train)\nval_data = lgb.Dataset(X_val, label=y_val)\n\n# Train the final model with early stopping and suppressed verbose output\nfinal_model = lgb.train(\n    best_params,          # Best hyperparameters\n    train_data,           # Training dataset\n    num_boost_round=1000,  # Maximum number of boosting rounds\n    valid_sets=[val_data],  # Validation dataset for early stopping\n    valid_names=['valid'],  # Optional name for the validation dataset\n    callbacks=[early_stopping(stopping_rounds=10), log_evaluation(period=100)],  # Early stopping and logging callbacks\n)\n\npredictions = final_model.predict(X_test, num_iteration=final_model.best_iteration)\npredictions = [list(x).index(max(x)) for x in predictions]  # Convert probabilities to class labels\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:16:11.928067Z","iopub.execute_input":"2024-06-22T10:16:11.928654Z","iopub.status.idle":"2024-06-22T10:16:22.449917Z","shell.execute_reply.started":"2024-06-22T10:16:11.928621Z","shell.execute_reply":"2024-06-22T10:16:22.448553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgb_preds_labels = label_encoder.inverse_transform(predictions)\n\n# Save the predictions to a CSV file\nlgb_result = pd.DataFrame(X_test.index)\nlgb_result['Target'] = lgb_preds_labels\nlgb_result.to_csv('result_lgb.csv', index=False)\nlgb_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T10:16:22.451410Z","iopub.execute_input":"2024-06-22T10:16:22.451909Z","iopub.status.idle":"2024-06-22T10:16:22.532226Z","shell.execute_reply.started":"2024-06-22T10:16:22.451870Z","shell.execute_reply":"2024-06-22T10:16:22.531120Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}